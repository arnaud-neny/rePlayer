//////////////////////////////////////////////////////////////////////
//
//				Filter.h
//
//				druttis@darkface.pp.se
//
//////////////////////////////////////////////////////////////////////
#pragma once
#include "DspMath.h"
namespace psycle::plugins::druttis {
//////////////////////////////////////////////////////////////////////
//
//				Filter Class
//
//////////////////////////////////////////////////////////////////////
class Filter
{
	//////////////////////////////////////////////////////////////////
	//				Variables
	//////////////////////////////////////////////////////////////////
private:
	//				Coeffs
	float				ca;
	float				cb;
	float				cc;
	//				Buff
	float				b0;
	float				b1;
	float				b2;
	float				b3;
	float				b4;
	float				b5;
	float				b6;
	float				b7;
	//////////////////////////////////////////////////////////////////
	//				Constructor / Destructor
	//////////////////////////////////////////////////////////////////
public:
	Filter();
	~Filter();
	//////////////////////////////////////////////////////////////////
	//				Reset
	//////////////////////////////////////////////////////////////////
	void Reset();
	//////////////////////////////////////////////////////////////////
	//				InitMoog
	//////////////////////////////////////////////////////////////////
	inline void InitMoog(float freq, float res)
	{
		if (freq < 0.01f)
			freq = 0.01f;
		if (freq > 0.99f)
			freq = 0.99f;

		if (res < 0.0f)
			res = 0.0f;
		if (res > 0.99f)
			res = 0.99f;

		ca = freq * 1.16f;
		cb = res * 4.0f * (1.0f - 0.15f * ca * ca);
		cc = 1.0f - ca;
	}
	//////////////////////////////////////////////////////////////////
	//				DoMoog
	//////////////////////////////////////////////////////////////////
	inline float DoMoog(float in)
	{
		in -= b3 * cb;
		in *= 0.35013f * (ca * ca) * (ca * ca);

		b0 = in + 0.3f * b4 + cc * b0;
		b4 = in;

		b1 = b0 + 0.3f * b5 + cc * b1;
		b5 = b1;

		b2 = b1 + 0.3f * b6 + cc * b2;
		b6 = b2;

		b3 = b2 + 0.3f * b7 + cc * b3;
		b7 = b3;

		return b3;
	}
	//////////////////////////////////////////////////////////////////
	//				MoogLP24
	//////////////////////////////////////////////////////////////////
	inline float MoogLP24(float in)
	{
		DoMoog(in);
		return b3;
	}
	//////////////////////////////////////////////////////////////////
	//				MoogHP24
	//////////////////////////////////////////////////////////////////
	inline float MoogHP24(float in)
	{
		in = DoMoog(in);
		return in - b3;
	}
	//////////////////////////////////////////////////////////////////
	//				MoogBP24
	//////////////////////////////////////////////////////////////////
	inline float MoogBP24(float in)
	{
		DoMoog(in);
		return 3.0f * (b2 - b3);
	}
	//////////////////////////////////////////////////////////////////
	//				InitSimple
	//////////////////////////////////////////////////////////////////
	inline void InitSimple(float freq, float res)
	{
		if (freq < 0.01f)
			freq = 0.01f;
		if (freq > 0.99f)
			freq = 0.99f;
		if (res < 0.0f)
			res = 0.0f;
		if (res > 0.99f)
			res = 0.99f;
		ca = freq;
		cb = res + res / (1.0f - freq);
	}
	//////////////////////////////////////////////////////////////////
	//				SimpleLP12
	//////////////////////////////////////////////////////////////////
	inline float SimpleLP12(float in)
	{
		b0 = b0 + ca * (in - b0 + cb * (b0 - b1));
		b1 = b1 + ca * (b0 - b1);
		return b1;
	}
	//////////////////////////////////////////////////////////////////
	//				SimpleLP24
	//////////////////////////////////////////////////////////////////
	inline float SimpleLP24(float in)
	{
		b0 = b0 + ca * (in - b0 + cb * (b0 - b1));
		b1 = b1 + ca * (b0 - b1);
		b0 = b0 + ca * (b1 - b0 + cb * (b0 - b1));
		b1 = b1 + ca * (b0 - b1);
		return b1;
	}
	//////////////////////////////////////////////////////////////////
	//				SimpleLP36
	//////////////////////////////////////////////////////////////////
	inline float SimpleLP36(float in)
	{
		b0 = b0 + ca * (in - b0 + cb * (b0 - b1));
		b1 = b1 + ca * (b0 - b1);
		b0 = b0 + ca * (b1 - b0 + cb * (b0 - b1));
		b1 = b1 + ca * (b0 - b1);
		b0 = b0 + ca * (b1 - b0 + cb * (b0 - b1));
		b1 = b1 + ca * (b0 - b1);
		return b1;
	}
	//////////////////////////////////////////////////////////////////
	//				SimpleHP12
	//////////////////////////////////////////////////////////////////
	inline float SimpleHP12(float in)
	{
		b0 = b0 + ca * (in - b0 + cb * (b0 - b1));
		b1 = b1 + ca * (b0 - b1);
		return in - b1;
	}
	//////////////////////////////////////////////////////////////////
	//				SimpleHP24
	//////////////////////////////////////////////////////////////////
	inline float SimpleHP24(float in)
	{
		b0 = b0 + ca * (in - b0 + cb * (b0 - b1));
		b1 = b1 + ca * (b0 - b1);
		b0 = b0 + ca * (b1 - b0 + cb * (b0 - b1));
		b1 = b1 + ca * (b0 - b1);
		return in - b1;
	}
};
}