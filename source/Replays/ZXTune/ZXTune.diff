diff --git "a/external\\zxtune\\3rdparty\\z80ex\\typedefs.h" "b/source\\Replays\\ZXTune\\3rdparty\\z80ex\\typedefs.h"
index 4d88742..e0034f1 100644
--- "a/external\\zxtune\\3rdparty\\z80ex\\typedefs.h"
+++ "b/source\\Replays\\ZXTune\\3rdparty\\z80ex\\typedefs.h"
@@ -14,7 +14,7 @@ struct _z80_cpu_context;
 typedef struct _z80_cpu_context Z80EX_CONTEXT;
 
 #define __Z80EX_SELF_INCLUDE
-#include "z80ex.h"
+#include "include/z80ex.h" // rePlayer
 
 #define LITTLE_ENDIAN_VAL 0x41424344UL
 #define BIG_ENDIAN_VAL 0x44434241UL
diff --git "a/external\\zxtune\\3rdparty\\z80ex\\z80ex.c" "b/source\\Replays\\ZXTune\\3rdparty\\z80ex\\z80ex.c"
index 08b1900..9f5c373 100644
--- "a/external\\zxtune\\3rdparty\\z80ex\\z80ex.c"
+++ "b/source\\Replays\\ZXTune\\3rdparty\\z80ex\\z80ex.c"
@@ -13,7 +13,7 @@
 #define __Z80EX_SELF_INCLUDE
 
 #include "typedefs.h"
-#include "z80ex.h"
+#include "include/z80ex.h" // rePlayer
 #include "macros.h"
 
 #define temp_byte cpu->tmpbyte
@@ -33,6 +33,7 @@
 /*#define _DOQUOTE(x) #x
 #define DOQUOTE(x) _DOQUOTE(x)*/
 
+/* rePlayer
 #define DOQUOTE(x) #x
 
 static char revision_type[]=DOQUOTE(Z80EX_RELEASE_TYPE);
@@ -43,6 +44,7 @@ LIB_EXPORT Z80EX_VERSION *z80ex_get_version()
 {
 	return(&version);
 }
+*/
 
 /* do one opcode (instruction or prefix) */
 LIB_EXPORT int z80ex_step(Z80EX_CONTEXT *cpu)
diff --git "a/external\\zxtune\\3rdparty\\z80ex\\z80ex_dasm.c" "b/source\\Replays\\ZXTune\\3rdparty\\z80ex\\z80ex_dasm.c"
index 07aee73..e7db0b0 100644
--- "a/external\\zxtune\\3rdparty\\z80ex\\z80ex_dasm.c"
+++ "b/source\\Replays\\ZXTune\\3rdparty\\z80ex\\z80ex_dasm.c"
@@ -14,7 +14,7 @@
 #include <stdarg.h>
  
 #define __Z80EX_SELF_INCLUDE
-#include "z80ex_dasm.h"
+#include "include/z80ex_dasm.h" // rePlayer
 
 #ifdef _MSC_VER
 #define snprintf _snprintf
diff --git "a/external\\zxtune\\include\\source_location.h" "b/source\\Replays\\ZXTune\\include\\source_location.h"
index 6817391..710295f 100644
--- "a/external\\zxtune\\include\\source_location.h"
+++ "b/source\\Replays\\ZXTune\\include\\source_location.h"
@@ -66,26 +66,20 @@ namespace Debug
   }
 }  // namespace Debug
 
-template<class C, C... Chars>
+// rePlayer begin
 class SourceFile
 {
-  static_assert(sizeof...(Chars) != 0, "Empty SourceFile");
-  constexpr static const std::array<C, sizeof...(Chars)> Path{Debug::Normalize(Chars)...};
-
 public:
   using TagType = uint32_t;
 
-  constexpr static const auto StaticLocation = std::basic_string_view<C>{Path.data(), Path.size()};
-  constexpr static const auto StaticTag = Debug::Hash<TagType>(StaticLocation);
-
   constexpr auto Location() const
   {
-    return StaticLocation;
+    return "";
   }
 
   constexpr auto Tag() const
   {
-    return StaticTag;
+    return 0;
   }
 
   class SourceLine
@@ -97,12 +91,12 @@ public:
 
     constexpr auto Location() const
     {
-      return StaticLocation;
+        return "";
     }
 
     constexpr TagType Tag() const
     {
-      return StaticTag + Value;
+      return 0;
     }
 
     constexpr auto Line() const
@@ -129,27 +123,33 @@ namespace Debug
 #else
   constexpr auto ROOT = ""sv;
 #endif
-  template<std::size_t Offset, typename C, C Head, C... Tail>
-  constexpr auto MakeSourceFile()
-  {
-    if constexpr (Offset == ROOT.size())
-    {
-      static_assert(Head == '/' || Head == '\\', "SOURCES_ROOT should not end with slash");
-      return SourceFile<C, Tail...>();
-    }
-    else
-    {
-      static_assert(MatchesPathElement(Head, ROOT[Offset]), "Path outside of SOURCES_ROOT");
-      return MakeSourceFile<Offset + 1, C, Tail...>();
-    }
-  }
+//   template<std::size_t Offset, typename C, C Head, C... Tail>
+//   constexpr auto MakeSourceFile()
+//   {
+//     if constexpr (Offset == ROOT.size())
+//     {
+//       static_assert(Head == '/' || Head == '\\', "SOURCES_ROOT should not end with slash");
+//       return SourceFile<C, Tail...>();
+//     }
+//     else
+//     {
+//       static_assert(MatchesPathElement(Head, ROOT[Offset]), "Path outside of SOURCES_ROOT");
+//       return MakeSourceFile<Offset + 1, C, Tail...>();
+//     }
+//   }
 }  // namespace Debug
 
-template<typename C, C... Chars>
-constexpr auto operator"" _source()
+
+// template<typename C, C... Chars>
+// constexpr auto operator"" _source()
+// {
+//   return Debug::MakeSourceFile<0, C, Chars...>();
+// }
+constexpr auto operator"" _source(const char* /*str*/, std::size_t /*size*/) noexcept
 {
-  return Debug::MakeSourceFile<0, C, Chars...>();
+  return SourceFile();
 }
+// rePlayer end
 
 #define ThisFile() DO_LITERAL(__FILE__, _source)
 #define ThisLine() ThisFile().Line(__LINE__)
diff --git "a/external\\zxtune\\src\\binary\\format\\expression.cpp" "b/source\\Replays\\ZXTune\\src\\binary\\format\\expression.cpp"
index bd64591..af8184c 100644
--- "a/external\\zxtune\\src\\binary\\format\\expression.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\binary\\format\\expression.cpp"
@@ -106,12 +106,15 @@ namespace Binary::FormatDSL
 
     std::size_t Cleanup()
     {
-      const auto first = Predicates.begin();
-      const auto last = Predicates.end();
+      // rePlayer begin
+      const auto first = Predicates.data();
+      const auto last = Predicates.data() + Predicates.size();
       const auto isAny = [](const Predicate* p) { return p == AnyValuePredicate::Instance(); };
       const auto firstNotAny = std::find_if_not(first, last, isAny);
       Require(firstNotAny != last);
-      const auto lastNotAny = std::find_if_not(Predicates.rbegin(), Predicates.rend(), isAny).base();
+      const auto lastNotAnyIt = std::find_if_not(Predicates.rbegin(), Predicates.rend(), isAny).base();
+      const auto lastNotAny = lastNotAnyIt != Predicates.end() ? &lastNotAnyIt[0] : last;
+      // rePlayer end
       if (first != firstNotAny)
       {
         std::copy(firstNotAny, lastNotAny, first);
diff --git "a/external\\zxtune\\src\\binary\\format\\lexic_analysis.cpp" "b/source\\Replays\\ZXTune\\src\\binary\\format\\lexic_analysis.cpp"
index e907afa..51c8198 100644
--- "a/external\\zxtune\\src\\binary\\format\\lexic_analysis.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\binary\\format\\lexic_analysis.cpp"
@@ -95,13 +95,13 @@ namespace LexicalAnalysis
       std::vector<const Tokenizer*> candidates(Sources.size());
       std::transform(Sources.begin(), Sources.end(), candidates.begin(),
                      [](const Tokenizer::Ptr& obj) { return obj.get(); });
-      for (const auto* lexemeEnd = lexemeStart + 1; !candidates.empty(); ++lexemeEnd)
+      for (auto lexemeEnd = lexemeStart + 1; !candidates.empty(); ++lexemeEnd) // rePlayer
       {
         const auto lexeme = MakeStringView(lexemeStart, lexemeEnd);
         auto tokens = MakeRWPtr<TokensSet>(lexeme);
         std::vector<const Tokenizer*> passedCandidates;
         passedCandidates.reserve(candidates.size());
-        for (const auto* const tokenizer : candidates)
+        for (const auto tokenizer : candidates) // rePlayer
         {
           switch (const TokenType result = tokenizer->Parse(lexeme))
           {
diff --git "a/external\\zxtune\\src\\core\\plugin_attrs.h" "b/source\\Replays\\ZXTune\\src\\core\\plugin_attrs.h"
index 6ceae6a..6ab2b0a 100644
--- "a/external\\zxtune\\src\\core\\plugin_attrs.h"
+++ "b/source\\Replays\\ZXTune\\src\\core\\plugin_attrs.h"
@@ -13,6 +13,12 @@
 #include "string_view.h"
 #include "types.h"
 
+// rePlayer beging
+#ifdef OUT
+#   undef OUT
+#endif
+// rePlayer end
+
 namespace ZXTune
 {
   class PluginId : public StringView
diff --git "a/external\\zxtune\\src\\core\\plugins\\archives\\plugins_archived.cpp" "b/source\\Replays\\ZXTune\\src\\core\\plugins\\archives\\plugins_archived.cpp"
index e3aa50a..6c61531 100644
--- "a/external\\zxtune\\src\\core\\plugins\\archives\\plugins_archived.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\core\\plugins\\archives\\plugins_archived.cpp"
@@ -33,10 +33,10 @@ namespace ZXTune
   const ContainerPluginDescription UNARCHIVES[] =
   {
     {"ZIP"_id,     &CreateZipDecoder,     Capabilities::Container::Type::ARCHIVE | Capabilities::Container::Traits::DIRECTORIES},
-    {"RAR"_id,     &CreateRarDecoder,     Capabilities::Container::Type::ARCHIVE | Capabilities::Container::Traits::DIRECTORIES},
+//    {"RAR"_id,     &CreateRarDecoder,     Capabilities::Container::Type::ARCHIVE | Capabilities::Container::Traits::DIRECTORIES},
     {"LHA"_id,     &CreateLhaDecoder,     Capabilities::Container::Type::ARCHIVE | Capabilities::Container::Traits::DIRECTORIES},
     {"UMX"_id,     &CreateUMXDecoder,     Capabilities::Container::Type::ARCHIVE | Capabilities::Container::Traits::PLAIN},
-    {"7ZIP"_id,    &Create7zipDecoder,    Capabilities::Container::Type::ARCHIVE | Capabilities::Container::Traits::DIRECTORIES},
+//    {"7ZIP"_id,    &Create7zipDecoder,    Capabilities::Container::Type::ARCHIVE | Capabilities::Container::Traits::DIRECTORIES},
   };
 
   const ContainerPluginDescription ZXUNARCHIVES[] =
diff --git "a/external\\zxtune\\src\\core\\plugins\\archives\\raw_supp.cpp" "b/source\\Replays\\ZXTune\\src\\core\\plugins\\archives\\raw_supp.cpp"
index ac0d6a5..02e7918 100644
--- "a/external\\zxtune\\src\\core\\plugins\\archives\\raw_supp.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\core\\plugins\\archives\\raw_supp.cpp"
@@ -427,7 +427,7 @@ namespace ZXTune::Raw
 
     void Move(std::size_t step)
     {
-      if (!Subdata.unique())
+      if (Subdata.use_count() != 1) // rePlayer
       {
         Dbg("Subdata is captured. Duplicate.");
         Subdata = MakePtr<ScanDataContainer>(Parent->GetData(), Subdata->GetOffset() + step);
@@ -806,7 +806,7 @@ namespace ZXTune::Raw
         progress.Report(offset);
         usedPlugins.SetOffset(offset);
         const auto detectResult = usedPlugins.Detect(subLocation, callback);
-        if (!subLocation.unique())
+        if (subLocation.use_count() != 1) // rePlayer
         {
           Dbg("Sublocation is captured. Duplicate.");
           subLocation = MakePtr<ScanDataLocation>(input, offset);
diff --git "a/external\\zxtune\\src\\core\\plugins\\players\\plugins_list.cpp" "b/source\\Replays\\ZXTune\\src\\core\\plugins\\players\\plugins_list.cpp"
index 4492567..b69af70 100644
--- "a/external\\zxtune\\src\\core\\plugins\\players\\plugins_list.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\core\\plugins\\players\\plugins_list.cpp"
@@ -97,28 +97,28 @@ namespace ZXTune
     RegisterFTCSupport(players);
     RegisterCOPSupport(players);
     RegisterTFESupport(players);
-    RegisterXMPPlugins(players);
+//    RegisterXMPPlugins(players);
     RegisterET1Support(players);
     RegisterAYCSupport(players);
-    RegisterSPCSupport(players);
+//    RegisterSPCSupport(players);
     RegisterMTCSupport(players);
-    RegisterAHXSupport(players);
-    RegisterPSFSupport(players);
-    RegisterUSFSupport(players);
-    RegisterGSFSupport(players);
-    Register2SFSupport(players);
-    RegisterNCSFSupport(players);
-    RegisterSDSFSupport(players);
-    RegisterMP3Plugin(players);
-    RegisterOGGPlugin(players);
-    RegisterFLACPlugin(players);
-    RegisterVGMPlugins(players);
-    RegisterMPTPlugins(players);
-    RegisterSIDPlugins(players, archives);
-    RegisterGMEPlugins(players, archives);
-    RegisterASAPPlugins(players, archives);
-    RegisterVGMStreamPlugins(players, archives);
-    RegisterV2MSupport(players);
-    RegisterWAVPlugin(players);  // wav after VGMStream
+//    RegisterAHXSupport(players);
+//    RegisterPSFSupport(players);
+//    RegisterUSFSupport(players);
+//    RegisterGSFSupport(players);
+//    Register2SFSupport(players);
+//    RegisterNCSFSupport(players);
+//    RegisterSDSFSupport(players);
+//    RegisterMP3Plugin(players);
+//    RegisterOGGPlugin(players);
+//    RegisterFLACPlugin(players);
+//    RegisterVGMPlugins(players);
+//    RegisterMPTPlugins(players);
+//    RegisterSIDPlugins(players, archives);
+//    RegisterGMEPlugins(players, archives);
+//    RegisterASAPPlugins(players, archives);
+//    RegisterVGMStreamPlugins(players, archives);
+//    RegisterV2MSupport(players);
+//    RegisterWAVPlugin(players);  // wav after VGMStream
   }
 }  // namespace ZXTune
diff --git "a/external\\zxtune\\src\\formats\\archived\\zip.cpp" "b/source\\Replays\\ZXTune\\src\\formats\\archived\\zip.cpp"
index 37b1b30..54ad595 100644
--- "a/external\\zxtune\\src\\formats\\archived\\zip.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\formats\\archived\\zip.cpp"
@@ -21,6 +21,7 @@
 #include "make_ptr.h"
 #include "string_view.h"
 
+#define assert(...) // rePlayer
 #include <memory>
 #include <numeric>
 
diff --git "a/external\\zxtune\\src\\formats\\chiptune\\aym\\globaltracker.cpp" "b/source\\Replays\\ZXTune\\src\\formats\\chiptune\\aym\\globaltracker.cpp"
index 6538875..bd9be60 100644
--- "a/external\\zxtune\\src\\formats\\chiptune\\aym\\globaltracker.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\formats\\chiptune\\aym\\globaltracker.cpp"
@@ -867,7 +867,7 @@ namespace Formats::Chiptune
         : StartAddr(hdr.Address)
       {
         AddArea(HEADER, 0);
-        AddArea(PATTERNS, GetStart(hdr.Patterns.front().Offsets.begin(), hdr.Patterns.back().Offsets.end(), StartAddr));
+        AddArea(PATTERNS, GetStart(hdr.Patterns.front().Offsets.data(), hdr.Patterns.back().Offsets.data() + hdr.Patterns.back().Offsets.size(), StartAddr)); // rePlayer
         AddArea(SAMPLES, GetStart(hdr.SamplesOffsets.begin(), hdr.SamplesOffsets.end(), StartAddr));
         AddArea(ORNAMENTS, GetStart(hdr.OrnamentsOffsets.begin(), hdr.OrnamentsOffsets.end(), StartAddr));
         AddArea(END, size);
diff --git "a/external\\zxtune\\src\\formats\\chiptune\\aym\\protracker3_vortex.cpp" "b/source\\Replays\\ZXTune\\src\\formats\\chiptune\\aym\\protracker3_vortex.cpp"
index 31a1c40..a657952 100644
--- "a/external\\zxtune\\src\\formats\\chiptune\\aym\\protracker3_vortex.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\formats\\chiptune\\aym\\protracker3_vortex.cpp"
@@ -255,7 +255,7 @@ namespace Formats::Chiptune
       explicit SignedHexObject(StringView val)
       {
         Require(val.size() == Width + 1);
-        const auto* it = val.begin();
+        auto it = val.begin(); // rePlayer
         const SignFlag sign(*it);
         for (++it; it != val.end(); ++it)
         {
@@ -833,7 +833,7 @@ namespace Formats::Chiptune
     private:
       uint_t AsInt() const
       {
-        const auto* const notePos = std::find(NOTES.begin(), NOTES.end(), Val.substr(0, 2));
+        const auto notePos = std::find(NOTES.begin(), NOTES.end(), Val.substr(0, 2)); // rePlayer
         Require(notePos != NOTES.end());
         const uint_t halftone = notePos - NOTES.begin();
         const char octave = Val[2];
diff --git "a/external\\zxtune\\src\\formats\\chiptune\\aym\\ym_vtx.cpp" "b/source\\Replays\\ZXTune\\src\\formats\\chiptune\\aym\\ym_vtx.cpp"
index 1a05358..393a218 100644
--- "a/external\\zxtune\\src\\formats\\chiptune\\aym\\ym_vtx.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\formats\\chiptune\\aym\\ym_vtx.cpp"
@@ -313,8 +313,8 @@ namespace Formats::Chiptune
           ParseTransponedMatrix(src, lines, columns, target);
           if (Ver3b::FastCheck(data, size))
           {
-            const uint32_t loop = stream.Read<be_uint32_t>();
-            target.SetLoop(std::min(loop, swapBytes(loop)));
+              const uint_t loop = stream.Read<le_uint32_t>(); // rePlayer
+              target.SetLoop(loop);
           }
           return CreateCalculatingCrcContainer(stream.GetReadContainer(), dumpOffset, matrixSize);
         }
diff --git "a/external\\zxtune\\src\\formats\\chiptune\\emulation\\playstation2soundformat.cpp" "b/source\\Replays\\ZXTune\\src\\formats\\chiptune\\emulation\\playstation2soundformat.cpp"
index f4addcd..7cdb0ec 100644
--- "a/external\\zxtune\\src\\formats\\chiptune\\emulation\\playstation2soundformat.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\formats\\chiptune\\emulation\\playstation2soundformat.cpp"
@@ -20,6 +20,7 @@
 #include "byteorder.h"
 #include "make_ptr.h"
 #include "string_view.h"
+#include "string_type.h" // rePlayer
 
 #include <map>
 
diff --git "a/external\\zxtune\\src\\formats\\packed\\compiledasc.cpp" "b/source\\Replays\\ZXTune\\src\\formats\\packed\\compiledasc.cpp"
index fe7c505..adbc077 100644
--- "a/external\\zxtune\\src\\formats\\packed\\compiledasc.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\formats\\packed\\compiledasc.cpp"
@@ -17,7 +17,7 @@
 #include "byteorder.h"
 #include "contract.h"
 #include "make_ptr.h"
-#include "static_string.h"
+//#include "static_string.h" // rePlayer
 #include "string_view.h"
 
 #include <algorithm>
@@ -113,25 +113,25 @@ namespace Formats::Packed
       const ParseFunc Parse;
       const InsertMetaInfoFunc InsertMetaInformation;
     };
-
-    constexpr auto ID_FORMAT =
+    // rePlayer begin
+    const std::string ID_FORMAT =
         "'A'S'M' 'C'O'M'P'I'L'A'T'I'O'N' 'O'F' "
         "?{20}"  // title
         "?{4}"   // any text
         "?{20}"  // author
-        ""_ss;
+        ;
 
-    constexpr auto BASE_FORMAT =
+    const std::string BASE_FORMAT =
         "?{11}"    // unknown
         "c3??"     // init
         "c3??"     // play
-        "c3??"_ss  // silent
+        "c3??"  // silent
         + ID_FORMAT +
         //+0x53    init
         "af"  // xor a
-        "?{28}"_ss;
+        "?{28}";
 
-    constexpr auto VERSION0_FORMAT = BASE_FORMAT +
+    const std::string VERSION0_FORMAT = BASE_FORMAT +
                                      //+0x70
                                      "11??"  // ld de,ModuleAddr
                                      "42"    // ld b,d
@@ -140,7 +140,7 @@ namespace Formats::Packed
                                      "13"    // inc de
                                      "32??"  // ld (xxx),a
                                      "cd??"  // call xxxx
-                                     ""_ss;
+                                     "";
     const VersionTraits VERSION0 = {
         sizeof(PlayerVer0),
         "ASC Sound Master v0.x player"sv,
@@ -150,7 +150,7 @@ namespace Formats::Packed
         &Formats::Chiptune::ASCSoundMaster::Ver0::InsertMetaInformation,
     };
 
-    constexpr auto VERSION1_FORMAT = BASE_FORMAT +
+    const std::string VERSION1_FORMAT = BASE_FORMAT +
                                      //+0x70
                                      "11??"  // ld de,ModuleAddr
                                      "42"    // ld b,d
@@ -161,7 +161,7 @@ namespace Formats::Packed
                                      "1a"    // ld a,(de)
                                      "13"    // inc de
                                      "32??"  // ld (xxx),a
-                                     ""_ss;
+                                     "";
     const VersionTraits VERSION1 = {
         sizeof(PlayerVer0),
         "ASC Sound Master v1.x player"sv,
@@ -171,11 +171,11 @@ namespace Formats::Packed
         &Formats::Chiptune::ASCSoundMaster::Ver1::InsertMetaInformation,
     };
 
-    constexpr auto VERSION2_FORMAT =
+    const std::string VERSION2_FORMAT =
         "?{11}"  // padding
         "184600"
         "c3??"
-        "c3??"_ss
+        "c3??"
         + ID_FORMAT +
         //+0x53 init
         "cd??"
@@ -183,7 +183,7 @@ namespace Formats::Packed
         "?{35}"
         //+123
         "11??"  // data offset
-        ""_ss;
+        "";
     const VersionTraits VERSION2 = {
         sizeof(PlayerVer2),
         "ASC Sound Master v2.x player"sv,
@@ -192,6 +192,7 @@ namespace Formats::Packed
         &Formats::Chiptune::ASCSoundMaster::Ver1::Parse,
         &Formats::Chiptune::ASCSoundMaster::Ver1::InsertMetaInformation,
     };
+    // rePlayer end
 
     bool IsInfoEmpty(Binary::View info)
     {
diff --git "a/external\\zxtune\\src\\formats\\packed\\compiledst3.cpp" "b/source\\Replays\\ZXTune\\src\\formats\\packed\\compiledst3.cpp"
index fcf3dff..98b5a59 100644
--- "a/external\\zxtune\\src\\formats\\packed\\compiledst3.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\formats\\packed\\compiledst3.cpp"
@@ -88,7 +88,7 @@ namespace Formats::Packed
     {
       // 28 is fixed
       // 27 is title
-      const auto* const titleStart = info.begin() + 28;
+      auto titleStart = info.begin() + 28; // rePlayer
       return std::none_of(titleStart, info.end(), [](auto c) { return c > ' '; });
     }
   }  // namespace CompiledST3
diff --git "a/external\\zxtune\\src\\formats\\packed\\compiledstp.cpp" "b/source\\Replays\\ZXTune\\src\\formats\\packed\\compiledstp.cpp"
index 184e2fa..68cea12 100644
--- "a/external\\zxtune\\src\\formats\\packed\\compiledstp.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\formats\\packed\\compiledstp.cpp"
@@ -159,7 +159,7 @@ namespace Formats::Packed
     {
       // 28 is fixed
       // 25 is title
-      const auto* const titleStart = info.begin() + 28;
+      const auto titleStart = info.begin() + 28; // rePlayer
       return std::none_of(titleStart, info.end(), [](auto b) { return b > ' '; });
     }
   }  // namespace CompiledSTP
diff --git "a/external\\zxtune\\src\\formats\\packed\\zxzip_file.cpp" "b/source\\Replays\\ZXTune\\src\\formats\\packed\\zxzip_file.cpp"
index 6c60c3c..ee69070 100644
--- "a/external\\zxtune\\src\\formats\\packed\\zxzip_file.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\formats\\packed\\zxzip_file.cpp"
@@ -437,7 +437,7 @@ namespace Formats::Packed
           LZWTree tree;
           ResetTree(tree);
 
-          auto* lastFree = tree.begin() + LZWEntry::LIMITER;
+          auto lastFree = tree.begin() + LZWEntry::LIMITER; // rePlayer
 
           uint_t codeSize = 9;
           uint_t oldCode = stream.GetBits(codeSize);
diff --git "a/external\\zxtune\\src\\parameters\\identifier.h" "b/source\\Replays\\ZXTune\\src\\parameters\\identifier.h"
index 3f3cf4c..371e50f 100644
--- "a/external\\zxtune\\src\\parameters\\identifier.h"
+++ "b/source\\Replays\\ZXTune\\src\\parameters\\identifier.h"
@@ -122,9 +122,15 @@ namespace Parameters
     constexpr static const std::array<char, sizeof...(Symbols)> Storage = {Symbols...};
   };
 
+/*
   template<typename CharType, CharType... Symbols>
   constexpr auto operator"" _id()
   {
     return StaticIdentifier<Symbols...>{};
   }
+*/
+  constexpr std::string operator"" _id(const char* str, std::size_t)
+  {
+      return str;
+  }
 }  // namespace Parameters
diff --git "a/external\\zxtune\\src\\parameters\\types.h" "b/source\\Replays\\ZXTune\\src\\parameters\\types.h"
index 007c432..0a7401b 100644
--- "a/external\\zxtune\\src\\parameters\\types.h"
+++ "b/source\\Replays\\ZXTune\\src\\parameters\\types.h"
@@ -14,7 +14,7 @@
 #include "binary/view.h"
 
 #include "string_type.h"
-#include "types.h"
+#include <types.h> // rePlayer: this code is a mess...
 
 //! @brief Namespace is used to keep parameters-working related types and functions
 namespace Parameters
diff --git "a/external\\zxtune\\src\\parameters\\src\\convert.cpp" "b/source\\Replays\\ZXTune\\src\\parameters\\src\\convert.cpp"
index 5d0d31b..acdf015 100644
--- "a/external\\zxtune\\src\\parameters\\src\\convert.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\parameters\\src\\convert.cpp"
@@ -45,7 +45,7 @@ namespace
   {
     const auto size = (val.size() - 1) / 2;
     Binary::DataBuilder builder(size);
-    const auto* src = val.begin();
+    const auto* src = val.data(); // rePlayer
     for (std::size_t i = 0; i < size; ++i)
     {
       const auto highNibble = FromHex(*++src);
diff --git "a/external\\zxtune\\src\\strings\\conversion.h" "b/source\\Replays\\ZXTune\\src\\strings\\conversion.h"
index b8acb61..960b7cc 100644
--- "a/external\\zxtune\\src\\strings\\conversion.h"
+++ "b/source\\Replays\\ZXTune\\src\\strings\\conversion.h"
@@ -28,8 +28,8 @@ namespace Strings
     else
     {
       auto result = T();
-      const auto* const it = str.begin();
-      const auto* const lim = str.end();
+      const auto* const it = str.data(); // rePlayer
+      const auto* const lim = str.data() + str.size(); // rePlayer
       const auto res = std::from_chars(it + (it != lim && *it == '+'), lim, result);
       if (res.ec == std::errc::result_out_of_range)
       {
diff --git "a/external\\zxtune\\src\\strings\\src\\encoding.cpp" "b/source\\Replays\\ZXTune\\src\\strings\\src\\encoding.cpp"
index 46dffc6..815dc2f 100644
--- "a/external\\zxtune\\src\\strings\\src\\encoding.cpp"
+++ "b/source\\Replays\\ZXTune\\src\\strings\\src\\encoding.cpp"
@@ -771,7 +771,7 @@ namespace Strings
   public:
     bool Check(StringView str) const override
     {
-      for (const auto* it = str.begin(); it != str.end(); ++it)
+      for (auto it = str.begin(); it != str.end(); ++it) // rePlayer
       {
         const uint8_t s1 = *it;
         if (s1 == 0x80 || s1 == 0xa0 || s1 >= 0xf0)
@@ -807,7 +807,7 @@ namespace Strings
     {
       std::vector<uint32_t> result;
       result.reserve(str.size());
-      for (const auto* it = str.begin(); it != str.end(); ++it)
+      for (auto it = str.begin(); it != str.end(); ++it) // rePlayer
       {
         const uint8_t s1 = *it;
         if (s1 == 0x5c)
@@ -923,7 +923,7 @@ namespace Strings
     Strings::Utf8Builder builder;
     builder.Reserve(str.size());
     bool needSwap = false;
-    for (const auto* it = str.begin(); it != str.end();)
+    for (auto it = str.begin(); it != str.end();) // rePlayer
     {
       const uint32_t sym = needSwap ? swapBytes(*it) : (*it);
       ++it;
